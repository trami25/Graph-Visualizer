<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Visualizer</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .node circle {
            fill: #ddd;
            stroke: #000;
            stroke-width: 1;
        }

        .node text {
            text-anchor: middle;
            alignment-baseline: central;
        }

        .edge text {
            display: none;
        }

        .link {
            fill: none;
            stroke: #000;
            stroke-width: 2;
        }

        .arrow {
            fill: rgb(128, 128, 128);
        }

        .node-bird rect {
            fill:darkgray;
            stroke: #fff;

        }

        .link-bird {
            fill: none;
            stroke: #828282;
            stroke-width: 0.5;
        }
        .node.focused circle {
        fill: #ff0000;
        stroke: #000;
        stroke-width: 2;
    }

    .node-bird.focused {
        fill: #ff0000;
        stroke: #fff;
    }

        #graph-container {
            border: 2px solid #000;
            overflow: hidden;
            position: relative;
        }

        #graph-outline {
            position: absolute;
            border: 2px solid #000;
            pointer-events: none;
        }

        #details {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: white;
            padding: 5px;
            border: 1px solid #000;
            display: none;
        }
    </style>
</head>
<body>
    <div id="graph-container">
        <div id="graph-outline"></div>
        <div id="details"></div>
        <script>
            let nodes = JSON.parse('{{ nodes_json|safe }}');
            let edges = JSON.parse('{{ edges_json|safe }}');
            let graph_directed = true;

            const width = 1000;
            const height = 600;

            const svg = d3.select("#graph-container").append("svg")
                .attr("width", width)
                .attr("height", height)
                .call(d3.zoom().scaleExtent([0.1, 4]).on("zoom", zoomed))
                .append("g");

            const simulation = d3.forceSimulation(nodes)
                .force("charge", d3.forceManyBody().strength(-200))
                .force("link", d3.forceLink(edges).id(d => d.node_id).distance(150))
                .force("collide", d3.forceCollide(70))
                .force("center", d3.forceCenter(width / 2, height / 2));

            const linkElements = svg.selectAll(".link")
                .data(edges)
                .enter().append("line")
                .attr("class", "link")
                .attr("marker-end", "url(#arrow)")
                .on("mouseover", showDetails)
                .on("mouseout", hideDetails);

            const nodeElements = svg.selectAll(".node")
                .data(nodes)
                .enter().append("g")
                .attr("class", "node")
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended))
                .on("mouseover", showDetails)
                .on("mouseout", hideDetails);

            nodeElements.append("circle")
                .attr("r", 20);

            nodeElements.append("text")
                .text(d => `ID: ${d.node_id}`)
                .attr("dy", 5);

            const edgeTextElements = svg.selectAll(".edge")
                .data(edges)
                .enter().append("text")
                .attr("class", "edge")
                .on("mouseover", showDetails)
                .on("mouseout", hideDetails);

            const arrowElements = svg.append("defs")
                .selectAll(".arrow")
                .data(edges)
                .enter().append("marker")
                .attr("class", "arrow")
                .attr("id", d => `arrow-${d.source.node_id}-${d.target.node_id}`)
                .attr("markerWidth", 10)
                .attr("markerHeight", 10)
                .attr("refX", 19)
                .attr("refY", 3)
                .attr("orient", "auto")
                .append("path")
                .attr("d", "M0,-5L10,0L0,5")
                .style("display", d => graph_directed ? "block" : "none");

            linkElements.attr("marker-end", d => `url(#arrow-${d.source.node_id}-${d.target.node_id})`);

            simulation.on("tick", () => {
                linkElements
                    .attr("x1", d => d.source.x)
                    .attr("y1", d => d.source.y)
                    .attr("x2", d => d.target.x)
                    .attr("y2", d => d.target.y);

                nodeElements
                    .attr("transform", d => `translate(${d.x},${d.y})`);

                edgeTextElements
                    .attr("x", d => (d.source.x + d.target.x) / 2)
                    .attr("y", d => (d.source.y + d.target.y) / 2);
            });


            d3.select("#graph-outline")
                .style("width", `${width}px`)
                .style("height", `${height}px`);

            const birdViewWidth = 300;
            const birdViewHeight = 300;
            let frameX = 0;
            let frameY = 0;

            const birdView = d3.select("#graph-outline").append("svg")
                .attr("width", birdViewWidth)
                .attr("height", birdViewHeight)
                .style("position", "absolute")
                .style("bottom", "10px")
                .style("right", "10px")
                .style("border", "1px solid #000")
                .style("background-color", "#f0f0f0");

           const birdViewNodes = birdView.selectAll(".node-bird")
                .data(nodes)
                .enter().append("circle")
                .attr("class", "node-bird")
                .attr("r", 5);

            const birdViewEdges = birdView.selectAll(".link-bird")
                .data(edges)
                .enter().append("line")
                .attr("class", "link-bird");

            function updateBirdView() {
                // Calculate the extent of the graph
                const graphExtent = getGraphExtent();

                // Calculate the scale factor for the birdView
                const scaleX = birdViewWidth / graphExtent.width;
                const scaleY = birdViewHeight / graphExtent.height;
                const scale = Math.min(scaleX, scaleY);

                // Apply the scale to nodes and edges
                birdViewNodes
                    .attr("cx", d => Math.max(0, Math.min(birdViewWidth, (d.x - graphExtent.minX) * scale)))
                    .attr("cy", d => Math.max(0, Math.min(birdViewHeight, (d.y - graphExtent.minY) * scale)));

                birdViewEdges
                    .attr("x1", d => Math.max(0, Math.min(birdViewWidth, (d.source.x - graphExtent.minX) * scale)))
                    .attr("y1", d => Math.max(0, Math.min(birdViewHeight, (d.source.y - graphExtent.minY) * scale)))
                    .attr("x2", d => Math.max(0, Math.min(birdViewWidth, (d.target.x - graphExtent.minX) * scale)))
                    .attr("y2", d => Math.max(0, Math.min(birdViewHeight, (d.target.y - graphExtent.minY) * scale)));


                const transform = d3.zoomTransform(svg.node());
                const mainViewX = -transform.x / transform.k;
                const mainViewY = -transform.y / transform.k;
                const mainViewWidth = width / transform.k;
                const mainViewHeight = height / transform.k;

                frameX = mainViewX;
                frameY = mainViewY;
                frameWidth = mainViewWidth;
                frameHeight = mainViewHeight;


                updateFrame();
            }

            // Function to get the extent (min and max coordinates) of the graph
            function getGraphExtent() {
                const minX = d3.min(nodes, d => d.x);
                const minY = d3.min(nodes, d => d.y);
                const maxX = d3.max(nodes, d => d.x);
                const maxY = d3.max(nodes, d => d.y);

                return {
                    minX: minX,
                    minY: minY,
                    maxX: maxX,
                    maxY: maxY,
                    width: maxX - minX,
                    height: maxY - minY
                };
            }

            nodeElements.on("click", clickNode);
            birdViewNodes.on("click", clickNode);
           function clickNode(event, d) {
                // Remove focus from all nodes
                nodeElements.classed("focused", false);
                birdViewNodes.classed("focused", false);

                // Add focus to the clicked node
                d3.select(this).classed("focused", true);

                // Find the corresponding node in the opposite view by ID
                const correspondingNode = (this.classList.contains("node") ? birdViewNodes : nodeElements)
                    .filter(node => node.node_id === d.node_id);

                // Add focus to the corresponding node in the opposite view
                correspondingNode.classed("focused", true);

            }



            function updateFrame() {
                return new Promise(resolve => {
                const transform = d3.zoomTransform(svg.node());
                const graphExtent = getGraphExtent();
                const scaleX = birdViewWidth / graphExtent.width;
                const scaleY = birdViewHeight / graphExtent.height;
                const scale = Math.min(scaleX, scaleY);

                const mainViewX = -transform.x / transform.k;
                const mainViewY = -transform.y / transform.k;

                frameX = mainViewX;
                frameY = mainViewY;
                frameWidth = width / transform.k;
                frameHeight = height / transform.k;

                birdView.selectAll(".frame").remove();

                birdView.append("rect")
                    .attr("class", "frame")
                    .attr("x", (frameX - graphExtent.minX) * scale)
                    .attr("y", (frameY - graphExtent.minY) * scale)
                    .attr("width", frameWidth * scale)
                    .attr("height", frameHeight * scale)
                    .style("fill", "none")
                    .style("stroke", "#ff0000")
                    .style("stroke-width", 2);

                resolve();
            });
        }

            simulation.on("end", () => {
                updateBirdView();
                updateFrameFromMainView();
            });

            function updateFrameFromMainView() {
                const transform = d3.zoomTransform(svg.node());

                const mainViewX = -transform.x / transform.k;
                const mainViewY = -transform.y / transform.k;

                frameX = mainViewX;
                frameY = mainViewY;

                updateFrame();
            }

            window.addEventListener("resize", () => {
                updateBirdView().then(() => {
                    updateFrameFromMainView();
                });
            });

            function zoomed(event) {
                svg.attr("transform", event.transform);
                updateBirdView().then(() => {
                    updateFrameFromMainView();
                });
            }


            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
		simulation.alpha(1).restart();
    		updateBirdView();

            }

            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
		updateBirdView();
            }

            function showDetails(event, d) {
                d3.select("#details")
                    .style("display", "block")
                    .html(JSON.stringify(d.data || d, null, 4));
            }

            function hideDetails() {
                d3.select("#details").style("display", "none");
            }

        </script>
    </div>
</body>